alias www='cd /z/DevSoftware/phpStudy2017/PHPTutorial/WWW'
配置
git config --global user.name "用户名"
git config --global user.email 邮箱
git config --list

创建分支
git branch <branchName>
git checkout -b <branchName>

重命名分支
git branch -m <old> <new>

删除本地分支
git branch -a  所有分支
git branch -r  远程分支
git branch -D <branchName>
git branch|grep hotfix|xargs git branch -D
git branch -r |awk -F '/' '/origin/ {printf "%s", $3}' |xargs -I {} echo {}
git branch -r |awk -F '[/]' '/origin/ {printf "%s\n", $3}' |xargs -I {} git push origin :{}
git branch -r |awk -F '[/_]' '/origin/ {printf "%s\n", $3}' |xargs -I {} git push origin :{}
git branch -r |awk -F '[/]' '/origin/ {printf "%s\t", $3}' |xargs -I {} git push origin :{}
git branch -r |awk -F '[/_]' '/origin/ {printf "%s\t", $3}' |xargs -I {} git push origin :{}

awk -F支持多分隔符                     
http://blog.csdn.net/tianxuhong/article/details/46456423  
http://blog.csdn.net/love_android_2011/article/details/43986621

切换分支
git checkout <branchName>
git checkout - 切换到之前的分支

丢弃修改
git checkout -- <filename>

git merge命令用于将两个或两个以上的开发历史加入(合并)一起
git merge 分支名称

查看本地分支
git branch

查看远程分支
git branch -r

查看所有分支
git branch -a

git查看本地分支关联（跟踪）的远程分支之间的对应关系，本地分支对应哪个远程分支
git branch -vv

删除本地分支
git branch -D <branchName>

 git branch|grep -E "(feature|release|hotfix)"|grep -v "order"|xargs git branch -D

删除远程分支
git push origin --delete <branchName>
git push origin :<branchName>

git push <远程主机名> <本地分支名>:<远程分支名>
git pull <远程主机名> <远程分支名>:<本地分支名>


git push --set-upstream remoteName remoteBranchName

git push -u remoteName remoteBranchName

example：

git push --set-upstream origin feature/review_service

git branch --set-upstream   [origin] <本地分支名> 主机别名/<远程分支名>
git branch --set-upstream   origin <远程分支名>

建立追踪关系，在现有分支与指定的远程分支之间


git 设置分支跟踪关系的三种方法

git push --set-upstream remoteName remoteBranchName

git push -u remoteName remoteBranchName

git branch -–set-upstream-to=remoteName/remoteBranchName  localBranchName         (改变关联关系)

example:

git push --set-upstream origin  feature/20180427_user_comments_restruct

git branch --set-upstream-to=origin/feature/20180427_user_comments_restruct feature/20180427_user_comments_rest
ruct

查看远程分支跟踪关系
git branch -vv

比较两次提交之间的差异
git diff <id1><id2>

在推送(push)操作之前，如想要检查文件代码变化，可使用git show命令指定提交ID来查看具体的变化。
git show commit_id

在两个分支之间比较
git diff <branch1> <branch2>

比较暂存区和版本库差异
git diff --staged

比较暂存区和版本库具体差异
git diff --cached

比较两个分支的整体差异情况
git diff --stat master 
git diff --stat master   filename

比较两个分支的的某个文件差异情况
git diff branchname -- filename

添加远程仓库
git remote add [shortname] [url]

不带参数，列出已经存在的远程仓库
git remote

列出详细信息，在每一个名字后面列出其远程url
git remote -v

git remote [-v]
git remote show <name>
git remote add <name> <url>
git remote rename <old> <new>
git remote remove <name>

删除本地标签
git tag -d <tagname>

删除远程标签
git push origin --delete tag <tagname>
git push origin :refs/tags/<tagname>

git shortlog
命令用于汇总每个人commit记录输出(将每个人的提交记录汇总到一起输出)

git log -S [keyword]
搜索提交历史，根据关键词

git log --stat 
查看提交统计信息(每一次提交修改了那些文件)

git log --oneline --decorate
git log --oneline
只在一行中查看版本号以及commit信息

git log --follow filename
查看文件历史版本信息(关于这个文件的提交记录)

git blame filename 
文件内容修改历史(可以跟踪到每一行是哪个添加的)


显示指定文件相关的每一次diff(每一次提交的改动情况)
git log -p filename

git whatchanged filename
显示指定文件相关的每一次diff


显示某次提交的元数据和内容变化
git show [commit]

显示某次提交发生变化的文件
git show --name-only [commit]

显示某次提交时，某个文件的内容
git show [commit]:[filename]

 git add --all
 添加所有修改到暂存区

提交暂存区到仓库区
git commit -m [message]

提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]

提交工作区自上次commit之后的变化，直接到仓库区
git commit -a

提交时显示所有diff信息
git commit -v

使用一次新的commit，替代上一次提交
如果代码没有任何新变化，则用来改写上一次commit的提交信息
git commit --amend -m [message]

重做上一次commit，并包括指定文件的新变化
git commit --amend [file1] [file2] ...


git stash
要切换分支以进行客户升级，但不想提交一直在做的工作; 那么可以把当前工作的改变隐藏起来。 要将一个新的存根推到堆栈上，运行git stash命令

现在，工作目录是干净的，所有更改都保存在堆栈中。现在使用git status命令来查看当前工作区状态。

git stash list
命令来查看已存在更改的列表

git stash pop
已经解决了客户升级问题，想要重新开始新的功能的代码编写，查找上次没有写完成的代码，只需执行git stash pop命令即可从堆栈中删除更改并将其放置在当前工作目录中

git stash apply
恢复暂存的内容

git stash drop
删除第一个暂存区


git commit -a -m 'message'
通过使用带有-a选项的git commit命令来自动从所有已知文件(即所有已经在索引中列出的文件)中添加“更改”，并自动从已从工作树中删除索引中的“rm”文件 ，然后执行实际提交;

git reset HEAD - <file>



如果你用git从远程pull拉取代码，每次都要输入密码，那么执行下面命令即可

git config --global credential.helper store

git branch --set-upstream-to=origin/remoteBranchName localBranchName

git checkout -b 本地分支名x origin/远程分支名x(必须在master分支才能够切换)


git diff --stat master develop

git branch --set-upstream-to=origin/<branch> feature/20180604_user_comments_restruct

git branch --set-upstream-to=origin/feature/20180604_user_comments_restruct feature/20180604_user_comments_restruct

https://ld140319:5201314ld@github.com


git diff HEAD@{"2018-07-08 23:59:59"}   当前分支的最新提交与当前分支某个时间点的代码比较



 ~/.gitconfig 全局配置文件
cat ./.git/config 某个项目的配置文件

设置别名
git config --global alias.st status

 git log --graph


 git log

 --oneline标记将每个commit压缩成一行. 默认情况下显示一个commit ID和commit描述的第一行
 
 --stat显示每个commit中每个文件的添加的行数和删除的行数.这对我们了解一个commit大致有些什么修改非常有用

 git log -p 查看每个commit具体修改了些什么  等价于 git show commit_id

 git shortlog是一个特殊版本的git log, 他的目的是为了创建一个发布的通知. 将commit按照作者分组, 显示每个commit的第一行描述. 通过他你很容易看到谁做了些什么.  默认情况下git shortlog按照作者名排序, 你可以使用-n按照每个作者的commit数量来排序.


 --graph标记会画出一个ASCII图展示commit历史的分支结构. 通常和--oneline --decorate结合使用:

git log --graph --oneline --decorate


--pretty=format:"<string>"来自定义输出. 
例如%cn代表commiter name, %h代表commit hash的缩写,  %cd代表commiter date.

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

 git log --graph --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=format:"%Y-%m-%d %H:%M:%S"

 git log --graph --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>' --abbrev-commit --date=format:"%Y-%m-%d %H:%M:%S"

git log  --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'

git config --global alias.lg "log  --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=format:'%Y-%m-%d %H:%M:%S'"

git lg

git config --global alias.last "log -1 HEAD"
git last

使用-n来限制输出的数量. 只显示最近3个commit: git log -3

--after或--before来按照日期筛选
只显示2014年7月1号之后的commit(包含7月1号): git log --after="2014-7-1"
使用一个相对的时间, 例如"1 week ago"和"yesterday"   git log --after="yesterday"
看某个时间段的commit可以同时使用--after和--before    git log --after="2014-7-1" --before="2014-7-4"


git log --author="John"
显示John贡献的commit. 作者名不需要精确匹配--只需要包含就行了

可以使用正则表达式. 下面的命令搜索Marry和John贡献的commit.

git log --author="John\|Mary"

--author不仅包含名还包含email, 所以你可以用这个搜索email.
git log --author="zeming.liu@toursforfun.cn"

搜索commit的内容  git log --grep="JRA-224"

只想查看跟某个文件相关的历史信息  git log -- foo.py bar.py   git log -- app/Console/Kernel.php



搜索和新增或删除某行代码相关的commit. 可以使用 －S"<string>"

假设你想知道Hello, World!这句话是什么时候加入到项目里去的, 你可以使用下面的命令:

git log -S"Hello,World!"

 git log -i -S"member"  -i忽略大小写

如果你想使用正则表达式去匹配而不是字符串, 那么你可以使用-G代替-S


过滤merge commit
默认情况下git log会输出merge commit.  你可以通过--no-merges标记来过滤掉merge commit:

git log --no-merges
如果你只对merge commit感兴趣可以使用--merges:

git log --merges



git log <since>..<until>
这个命令非常有用当你使用branch做为range参数的时候. 能很方便的显示2个branch之间的不同
 git log master..feature/20180705_anniversary  在feature/20180705_anniversary中有的，在master没有的提交



 -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全
--stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计
--shortstat：只显示--stat中最后的行数添加修改删除统计
--name-only：尽在已修改的提交信息后显示文件清单
--name-status：显示新增、修改和删除的文件清单
--abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符
--relative-date：使用较短的相对时间显示（例如："two weeks ago"）
--graph：显示ASCII图形表示的分支合并历史


git log --abbrev-commit --one-line


git config --global alias.showdir '!ls'  只能够为单引号